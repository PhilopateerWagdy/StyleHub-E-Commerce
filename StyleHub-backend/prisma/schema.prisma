// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
  DELIVERED
}

enum Gender {
  MEN
  WOMEN
  BOY
  GIRL
}

enum Fit {
  SLIM
  REGULAR
  OVERSIZE
  RELAXED
}

enum PaymentMethod {
  CARD
  CASH_ON_DELIVERY
  INSTAPAY
  VODCASH
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  isAdmin      Boolean  @default(false)
  cart         Cart?
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime @default(now())
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  gender    Gender? // Optional: only for subcategories
  parent    Category?  @relation("Subcategories", fields: [parentId], references: [id])
  parentId  Int? // Nullable for main categories
  children  Category[] @relation("Subcategories")
  products  Product[]
  slug      String     @unique
  isDeleted Boolean    @default(false)

  @@unique([name, parentId, gender])
  @@index([parentId])
  @@index([gender])
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  gender          Gender
  price           Decimal          @db.Decimal(10, 2)
  discountPrice   Decimal?         @db.Decimal(10, 2)
  discountPercent Int? // optional, manually set
  isOnSale        Boolean          @default(false)
  imgUrl          String[]
  fit             Fit?
  variants        ProductVariant[]
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      Int
  orderItems      OrderItem[]
  reviews         Review[]
  createdAt       DateTime         @default(now())
  isDeleted       Boolean          @default(false)
  CartItem        CartItem[]

  @@index([categoryId])
  @@index([gender])
  @@index([price])
  @@index([createdAt])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     String
  size      String
  quantity  Int

  @@unique([productId, color, size]) // prevent duplicate variants
  @@index([color])
  @@index([size])
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  status     OrderStatus
  totalPrice Decimal     @db.Decimal(10, 2)
  orderItems OrderItem[]
  payment    Payment?
  createdAt  DateTime    @default(now())

  fullName    String
  phone       String
  addressLine String
  country     String
  city        String
  notes       String?
  postalCode  String?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int

  @@index([cartId])
  @@index([productId])
}

model Payment {
  id      Int           @id @default(autoincrement())
  order   Order         @relation(fields: [orderId], references: [id])
  orderId Int           @unique
  method  PaymentMethod
  amount  Decimal       @db.Decimal(10, 2)
  paidAt  DateTime? // set after successful payment (card/insta/vod)

  @@index([orderId])
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
}
